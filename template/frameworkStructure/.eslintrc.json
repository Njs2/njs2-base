{
  "env": {
    "browser": true,
    "commonjs": true,
    "es2020": true,
    "node": true
  },
  "extends": "eslint:recommended",
  "parserOptions": {
    "ecmaVersion": 12
  },
  "globals": {
    "AutoLoad": true,
    "baseAction": true,
    "baseInitialize": true,
    "basePkg": true,
    "SQLManager": true,
    "MongoManager": true,
    "GLB": true
  },
  "rules": {
    "no-comma-dangle": 0, // disallow trailing commas in object literals
    "no-cond-assign": 0, // disallow assignment in conditional expressions
    "no-console": 0, // disallow use of console (off by default in the node environment)
    "no-constant-condition": 0, // disallow use of constant expressions in conditions
    "no-control-regex": 0, // disallow control characters in regular expressions
    "no-debugger": 0, // disallow use of debugger
    "no-dupe-keys": 0, // disallow duplicate keys when creating object literals
    "no-empty": 0, // disallow empty statements
    "no-empty-class": 0, // disallow the use of empty character classes in regular expressions
    "no-ex-assign": 0, // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": 0, // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": 0, // disallow unnecessary parentheses (off by default)
    "no-extra-semi": 0, // disallow unnecessary semicolons
    "no-func-assign": 0, // disallow overwriting functions written as function declarations
    "no-inner-declarations": 0, // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": 0, // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 0, // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": 0, // disallow negation of the left operand of an in expression
    "no-obj-calls": 0, // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": 0, // disallow multiple spaces in a regular expression literal
    "no-reserved-keys": 0, // disallow reserved words being used as object literal keys (off by default)
    "no-sparse-arrays": 0, // disallow sparse arrays
    "no-unreachable": 0, // disallow unreachable statements after a return, throw, continue, or break statement
    "no-self-assign": 0, // disallow assignments where both sides are exactly the same (off by default)
    "use-isnan": 0, // disallow comparisons with the value NaN
    "valid-jsdoc": 0, // Ensure JSDoc comments are valid (off by default)
    "valid-typeof": 0, // Ensure that the results of typeof are compared against a valid string
    ////////// Best Practices //////////
    "block-scoped-var": 0, // treat var statements as if they were block scoped (off by default)
    "complexity": 0, // specify the maximum cyclomatic complexity allowed in a program (off by default)
    "consistent-return": 0, // require return statements to either always or never specify values
    "curly": 0, // specify curly brace conventions for all control statements
    "default-case": 0, // require default case in switch statements (off by default)
    "dot-notation": 0, // encourages use of dot notation whenever possible
    "eqeqeq": 0, // require the use of === and !==
    "guard-for-in": 0, // make sure for-in loops have an if statement (off by default)
    "no-alert": 0, // disallow the use of alert, confirm, and prompt
    "no-caller": 0, // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 0, // disallow division operators explicitly at beginning of regular expression (off by default)
    "no-else-return": 0, // disallow else after a return in an if (off by default)
    "no-empty-label": 0, // disallow use of labels for anything other then loops and switches
    "no-eq-null": 0, // disallow comparisons to null without a type-checking operator (off by default)
    "no-eval": 0, // disallow use of eval()
    "no-extend-native": 0, // disallow adding to native types
    "no-extra-bind": 0, // disallow unnecessary function binding
    "no-fallthrough": 0, // disallow fallthrough of case statements
    "no-floating-decimal": 0, // disallow the use of leading or trailing decimal points in numeric literals (off by default)
    "no-implied-eval": 0, // disallow use of eval()-like methods
    "no-iterator": 0, // disallow usage of __iterator__ property
    "no-labels": 0, // disallow use of labeled statements
    "no-lone-blocks": 0, // disallow unnecessary nested blocks
    "no-loop-func": 0, // disallow creation of functions within loops
    "no-multi-spaces": 0, // disallow use of multiple spaces
    "no-multi-str": 0, // disallow use of multiline strings
    "no-native-reassign": 0, // disallow reassignments of native objects
    "no-new": 0, // disallow use of new operator when not part of the assignment or comparison
    "no-new-func": 0, // disallow use of new operator for Function object
    "no-new-wrappers": 0, // disallows creating new instances of String, Number, and Boolean
    "no-octal": 0, // disallow use of octal literals
    "no-octal-escape": 0, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-process-env": 0, // disallow use of process.env (off by default)
    "no-proto": 0, // disallow usage of __proto__ property
    "no-redeclare": 0, // disallow declaring the same variable more then once
    "no-return-assign": 0, // disallow use of assignment in return statement
    "no-script-url": 0, // disallow use of javascript: urls.
    "no-self-compare": 0, // disallow comparisons where both sides are exactly the same (off by default)
    "no-sequences": 0, // disallow use of comma operator
    "no-unused-expressions": 0, // disallow usage of expressions in statement position
    "no-void": 0, // disallow use of void operator (off by default)
    "no-warning-comments": 0, // disallow usage of configurable warning terms in comments, e.g. TODO or FIXME (off by default)
    "no-with": 0, // disallow use of the with statement
    "radix": 0, // require use of the second argument for parseInt() (off by default)
    "vars-on-top": 0, // requires to declare all vars on top of their containing scope (off by default)
    "wrap-iife": 0, // require immediate function invocation to be wrapped in parentheses (off by default)
    "yoda": 0, // require or disallow Yoda conditions
    "no-unused-vars": "warn",
    "no-undef": "warn"
  },
  "overrides": [
    {
      "files": [
        "cms/*.js"
      ], // Or *.test.js
      "rules": {
        "require-jsdoc": "off"
      }
    }
  ]
}